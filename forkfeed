#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import with_statement

import bisect
import logging
import feedgenerator

from opster import command
from github2.client import Github

def save_feed(filename, title, link, description, items):
    log = logging.getLogger()

    feed = feedgenerator.Atom1Feed(
        title=title,
        link=link,
        description=description,
        language=u'en',
    )

    for dt, fork_repname, commit in items:
        short_commit_message = commit.message.split('\n', 1)[0]
        log.debug(
            u'%s %s %s %s',
            fork_repname,
            commit.committed_date,
            commit.author['login'],
            short_commit_message
        )

        feed.add_item(
            title=fork_repname + ' ' + short_commit_message,
            link=u'http://github.com' + commit.url,
            description=commit.message,
            pubdate=commit.committed_date,
            author_name=commit.author['name'],
            author_email=commit.author['email'],
            author_link=u'http://github.com/' + commit.author['login'],
        )

    with open(filename, 'w') as f:
        feed.write(f, 'utf-8')


@command(usage='%name (username or username/repository) [-o output.xml]')
def main(
        repository_or_username,
        output_filename=('o', '%(username)s-%(repository)s.xml', 'output filename'),
        max_feed_length=('l', 100, 'max feed length'),
    ):
    """Utility to build Atom feed for new commits from your projects' forks on the GitHub."""

    logging.basicConfig(
        format='%(asctime)s %(levelname)s %(message)s',
        level=logging.DEBUG,
    )
    log = logging.getLogger()

    gh = Github()

    if '/' in repository_or_username:
        username, repository = repository_or_username.split('/', 1)
        repositories = [repository]
    else:
        username = repository_or_username
        repositories = [rep.name for rep in gh.repos.list(username)]

    for repository in repositories:
        full_repname = username + '/' + repository
        log.info('Processing %s' % full_repname)

        # first, we need to get the date of the last commit
        commits = gh.commits.list(full_repname, 'master')
        last_commit_date = commits[0].committed_date

        feed_items = []

        for fork in gh.repos.network(full_repname):
            fork_repname = '%(owner)s/%(name)s' % fork

            log.info('Fetching commits from %s' % fork_repname)
            fork_commits = gh.commits.list(fork_repname, 'master')

            for commit in fork_commits:
                # ignore old commits and commits from myself
                if commit.committed_date > last_commit_date and \
                        commit.author['login'] != username:
                    bisect.insort(feed_items, (commit.committed_date, fork_repname, commit))

        save_feed(
            filename=output_filename % locals(),
            title=u'%s forks' % full_repname,
            link=u'http://github.com/%s' % full_repname,
            description=u'Commits from forks of %s repository at GitHub.' % full_repname,
            items=feed_items[-1:-max_feed_length-1:-1],
        )


if __name__ == '__main__':
    main()
